/* automatically generated by rust-bindgen */

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    #[allow(unused_imports)]
    use self::super::root;
    #[doc = " Error codes returned by PortAudio functions."]
    #[doc = "Note that with the exception of paNoError, all PaErrorCodes are negative."]
    pub type PaError = ::std::os::raw::c_int;
    #[doc = " The type used to refer to audio devices. Values of this type usually"]
    #[doc = "range from 0 to (Pa_GetDeviceCount()-1), and may also take on the PaNoDevice"]
    #[doc = "and paUseHostApiSpecificDeviceSpecification values."]
    #[doc = ""]
    #[doc = "@see Pa_GetDeviceCount, paNoDevice, paUseHostApiSpecificDeviceSpecification"]
    pub type PaDeviceIndex = ::std::os::raw::c_int;
    pub const PaHostApiTypeId_paInDevelopment: root::PaHostApiTypeId = 0;
    pub const PaHostApiTypeId_paDirectSound: root::PaHostApiTypeId = 1;
    pub const PaHostApiTypeId_paMME: root::PaHostApiTypeId = 2;
    pub const PaHostApiTypeId_paASIO: root::PaHostApiTypeId = 3;
    pub const PaHostApiTypeId_paSoundManager: root::PaHostApiTypeId = 4;
    pub const PaHostApiTypeId_paCoreAudio: root::PaHostApiTypeId = 5;
    pub const PaHostApiTypeId_paOSS: root::PaHostApiTypeId = 7;
    pub const PaHostApiTypeId_paALSA: root::PaHostApiTypeId = 8;
    pub const PaHostApiTypeId_paAL: root::PaHostApiTypeId = 9;
    pub const PaHostApiTypeId_paBeOS: root::PaHostApiTypeId = 10;
    pub const PaHostApiTypeId_paWDMKS: root::PaHostApiTypeId = 11;
    pub const PaHostApiTypeId_paJACK: root::PaHostApiTypeId = 12;
    pub const PaHostApiTypeId_paWASAPI: root::PaHostApiTypeId = 13;
    pub const PaHostApiTypeId_paAudioScienceHPI: root::PaHostApiTypeId = 14;
    #[doc = " Unchanging unique identifiers for each supported host API. This type"]
    #[doc = "is used in the PaHostApiInfo structure. The values are guaranteed to be"]
    #[doc = "unique and to never change, thus allowing code to be written that"]
    #[doc = "conditionally uses host API specific extensions."]
    #[doc = ""]
    #[doc = "New type ids will be allocated when support for a host API reaches"]
    #[doc = "\"public alpha\" status, prior to that developers should use the"]
    #[doc = "paInDevelopment type id."]
    #[doc = ""]
    #[doc = "@see PaHostApiInfo"]
    pub type PaHostApiTypeId = u32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct PaUtilHostApiRepresentation {
        _unused: [u8; 0],
    }
    extern "C" {
        #[doc = " Retrieve a specific host API representation. This function can be used"]
        #[doc = "by implementations to retrieve a pointer to their representation in"]
        #[doc = "host api specific extension functions which aren't passed a rep pointer"]
        #[doc = "by pa_front.c."]
        #[doc = ""]
        #[doc = "@param hostApi A pointer to a host API represenation pointer. Apon success"]
        #[doc = "this will receive the requested representation pointer."]
        #[doc = ""]
        #[doc = "@param type A valid host API type identifier."]
        #[doc = ""]
        #[doc = "@returns An error code. If the result is PaNoError then a pointer to the"]
        #[doc = "requested host API representation will be stored in *hostApi. If the host API"]
        #[doc = "specified by type is not found, this function returns paHostApiNotFound."]
        pub fn PaUtil_GetHostApiRepresentation(
            hostApi: *mut *mut root::PaUtilHostApiRepresentation,
            type_: root::PaHostApiTypeId,
        ) -> root::PaError;
    }
    extern "C" {
        #[doc = " Convert a PortAudio device index into a host API specific device index."]
        #[doc = "@param hostApiDevice Pointer to a device index, on success this will recieve the"]
        #[doc = "converted device index value."]
        #[doc = "@param device The PortAudio device index to convert."]
        #[doc = "@param hostApi The host api which the index should be converted for."]
        #[doc = ""]
        #[doc = "@returns On success returns PaNoError and places the converted index in the"]
        #[doc = "hostApiDevice parameter."]
        pub fn PaUtil_DeviceIndexToHostApiDeviceIndex(
            hostApiDevice: *mut root::PaDeviceIndex,
            device: root::PaDeviceIndex,
            hostApi: *mut root::PaUtilHostApiRepresentation,
        ) -> root::PaError;
    }
    extern "C" {
        #[doc = " Set the host error information returned by Pa_GetLastHostErrorInfo. This"]
        #[doc = "function and the paUnanticipatedHostError error code should be used as a"]
        #[doc = "last resort.  Implementors should use existing PA error codes where possible,"]
        #[doc = "or nominate new ones. Note that at it is always better to use"]
        #[doc = "PaUtil_SetLastHostErrorInfo() and paUnanticipatedHostError than to return an"]
        #[doc = "ambiguous or inaccurate PaError code."]
        #[doc = ""]
        #[doc = "@param hostApiType  The host API which encountered the error (ie of the caller)"]
        #[doc = ""]
        #[doc = "@param errorCode The error code returned by the native API function."]
        #[doc = ""]
        #[doc = "@param errorText A string describing the error. PaUtil_SetLastHostErrorInfo"]
        #[doc = "makes a copy of the string, so it is not necessary for the pointer to remain"]
        #[doc = "valid after the call to PaUtil_SetLastHostErrorInfo() returns."]
        pub fn PaUtil_SetLastHostErrorInfo(
            hostApiType: root::PaHostApiTypeId,
            errorCode: ::std::os::raw::c_long,
            errorText: *const ::std::os::raw::c_char,
        );
    }
    extern "C" {
        #[doc = " Allocate size bytes, guaranteed to be aligned to a FIXME byte boundary"]
        pub fn PaUtil_AllocateMemory(size: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        #[doc = " Return the number of currently allocated blocks. This function can be"]
        #[doc = "used for detecting memory leaks."]
        #[doc = ""]
        #[doc = "@note Allocations will only be tracked if PA_TRACK_MEMORY is #defined. If"]
        #[doc = "it isn't, this function will always return 0."]
        pub fn PaUtil_CountCurrentlyAllocatedBlocks() -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[doc = " Initialize the clock used by PaUtil_GetTime(). Call this before calling"]
        #[doc = "PaUtil_GetTime."]
        #[doc = ""]
        #[doc = "@see PaUtil_GetTime"]
        pub fn PaUtil_InitializeClock();
    }
    extern "C" {
        #[doc = " Return the system time in seconds. Used to implement CPU load functions"]
        #[doc = ""]
        #[doc = "@see PaUtil_InitializeClock"]
        pub fn PaUtil_GetTime() -> f64;
    }
}
